# Generated by Django 4.0.3 on 2022-11-13 13:45

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0002_alter_eventbooking_character_name'),
    ]

    operations = [
        migrations.AddField(
            model_name='eventbooking',
            name='has_paid',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='eventbooking',
            name='contact_number',
            field=models.CharField(max_length=15, validators=[django.core.validators.RegexValidator('^\\+?[\\d-]*$', message='Must be valid phone number format')]),
        ),
        migrations.AlterField(
            model_name='eventbooking',
            name='email',
            field=models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator()]),
        ),
        migrations.AlterField(
            model_name='eventbooking',
            name='emergency_contact_name',
            field=models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^[\\D]*$', message='Must contain only non-digit characters')]),
        ),
        migrations.AlterField(
            model_name='eventbooking',
            name='emergency_contact_number',
            field=models.CharField(max_length=15, validators=[django.core.validators.RegexValidator('^\\+?[\\d-]*$', message='Must be valid phone number format')]),
        ),
        migrations.AlterField(
            model_name='eventbooking',
            name='first_name',
            field=models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^[\\D]*$', message='First name must contain non-digit characters')]),
        ),
        migrations.AlterField(
            model_name='eventbooking',
            name='last_name',
            field=models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^[\\D]*$', message='Last name must contain non-digit characters')]),
        ),
        migrations.AlterField(
            model_name='eventbooking',
            name='lt_player_id',
            field=models.CharField(blank=True, help_text='Required if you have an existing Lorien Trust character (otherwise no blue gold for you!)', max_length=15, null=True, validators=[django.core.validators.RegexValidator('[\\d]', message='Must be valid Lorien Trust Player ID')]),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='monster_catering_cost',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Monster catering cost'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='monster_cost',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Monster cost'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='monster_limit',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='player_catering_cost',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Player catering cost'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='player_cost',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Player cost'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='player_limit',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)]),
        ),
    ]
